//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/tankInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""tankInputAction"",
    ""maps"": [
        {
            ""name"": ""tank1"",
            ""id"": ""9182c53b-3f5f-42e9-b352-99ea0905a47f"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""641b9e95-7bc6-41c8-95e6-31df97d7ec48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""skill1"",
                    ""type"": ""Button"",
                    ""id"": ""887dae16-d7ed-4527-8bfb-507f230d8729"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""until"",
                    ""type"": ""Button"",
                    ""id"": ""99aa8b9c-1d9c-4ed3-a2a4-813896616c8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sub"",
                    ""type"": ""Button"",
                    ""id"": ""ad3f923e-ba21-4857-ab67-b27cec1d55a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a994a76e-e5ad-4d0b-9185-3265645a86b9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""300549cd-8696-43c4-8b0c-2ac5755d645f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7a8989bd-860c-4886-b606-d41abfde5ba7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""be008fbf-8d42-48e7-88a0-0492eda0b25f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""023562fa-250c-49c7-9f06-e806865ae628"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f5dc07e3-7480-4fad-8062-8ccde095647d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""274b9c16-0505-4969-af4c-a1bfdf2f39cd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""until"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""127e1632-84d3-482e-8078-05aa1c43dbfe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sub"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // tank1
        m_tank1 = asset.FindActionMap("tank1", throwIfNotFound: true);
        m_tank1_move = m_tank1.FindAction("move", throwIfNotFound: true);
        m_tank1_skill1 = m_tank1.FindAction("skill1", throwIfNotFound: true);
        m_tank1_until = m_tank1.FindAction("until", throwIfNotFound: true);
        m_tank1_sub = m_tank1.FindAction("sub", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // tank1
    private readonly InputActionMap m_tank1;
    private List<ITank1Actions> m_Tank1ActionsCallbackInterfaces = new List<ITank1Actions>();
    private readonly InputAction m_tank1_move;
    private readonly InputAction m_tank1_skill1;
    private readonly InputAction m_tank1_until;
    private readonly InputAction m_tank1_sub;
    public struct Tank1Actions
    {
        private @TankInputAction m_Wrapper;
        public Tank1Actions(@TankInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_tank1_move;
        public InputAction @skill1 => m_Wrapper.m_tank1_skill1;
        public InputAction @until => m_Wrapper.m_tank1_until;
        public InputAction @sub => m_Wrapper.m_tank1_sub;
        public InputActionMap Get() { return m_Wrapper.m_tank1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Tank1Actions set) { return set.Get(); }
        public void AddCallbacks(ITank1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Tank1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Tank1ActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @skill1.started += instance.OnSkill1;
            @skill1.performed += instance.OnSkill1;
            @skill1.canceled += instance.OnSkill1;
            @until.started += instance.OnUntil;
            @until.performed += instance.OnUntil;
            @until.canceled += instance.OnUntil;
            @sub.started += instance.OnSub;
            @sub.performed += instance.OnSub;
            @sub.canceled += instance.OnSub;
        }

        private void UnregisterCallbacks(ITank1Actions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @skill1.started -= instance.OnSkill1;
            @skill1.performed -= instance.OnSkill1;
            @skill1.canceled -= instance.OnSkill1;
            @until.started -= instance.OnUntil;
            @until.performed -= instance.OnUntil;
            @until.canceled -= instance.OnUntil;
            @sub.started -= instance.OnSub;
            @sub.performed -= instance.OnSub;
            @sub.canceled -= instance.OnSub;
        }

        public void RemoveCallbacks(ITank1Actions instance)
        {
            if (m_Wrapper.m_Tank1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITank1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Tank1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Tank1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Tank1Actions @tank1 => new Tank1Actions(this);
    public interface ITank1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSkill1(InputAction.CallbackContext context);
        void OnUntil(InputAction.CallbackContext context);
        void OnSub(InputAction.CallbackContext context);
    }
}
