//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/GameMnagement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameMnagement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameMnagement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameMnagement"",
    ""maps"": [
        {
            ""name"": ""handleSelect"",
            ""id"": ""7c8773d2-55bd-4bad-ae92-4d92d0f8e9bd"",
            ""actions"": [
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""f0847eaa-01c3-4b7d-bb42-ea9a6a0a4ed1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""f64a18db-9af1-4cd7-aba2-e377b1294959"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8dc0740b-f9ea-43d8-a011-17c1f3393f13"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6135f25-8fc8-4946-83bd-851733cb2f40"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // handleSelect
        m_handleSelect = asset.FindActionMap("handleSelect", throwIfNotFound: true);
        m_handleSelect_left = m_handleSelect.FindAction("left", throwIfNotFound: true);
        m_handleSelect_right = m_handleSelect.FindAction("right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // handleSelect
    private readonly InputActionMap m_handleSelect;
    private List<IHandleSelectActions> m_HandleSelectActionsCallbackInterfaces = new List<IHandleSelectActions>();
    private readonly InputAction m_handleSelect_left;
    private readonly InputAction m_handleSelect_right;
    public struct HandleSelectActions
    {
        private @GameMnagement m_Wrapper;
        public HandleSelectActions(@GameMnagement wrapper) { m_Wrapper = wrapper; }
        public InputAction @left => m_Wrapper.m_handleSelect_left;
        public InputAction @right => m_Wrapper.m_handleSelect_right;
        public InputActionMap Get() { return m_Wrapper.m_handleSelect; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandleSelectActions set) { return set.Get(); }
        public void AddCallbacks(IHandleSelectActions instance)
        {
            if (instance == null || m_Wrapper.m_HandleSelectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandleSelectActionsCallbackInterfaces.Add(instance);
            @left.started += instance.OnLeft;
            @left.performed += instance.OnLeft;
            @left.canceled += instance.OnLeft;
            @right.started += instance.OnRight;
            @right.performed += instance.OnRight;
            @right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IHandleSelectActions instance)
        {
            @left.started -= instance.OnLeft;
            @left.performed -= instance.OnLeft;
            @left.canceled -= instance.OnLeft;
            @right.started -= instance.OnRight;
            @right.performed -= instance.OnRight;
            @right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IHandleSelectActions instance)
        {
            if (m_Wrapper.m_HandleSelectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandleSelectActions instance)
        {
            foreach (var item in m_Wrapper.m_HandleSelectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandleSelectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandleSelectActions @handleSelect => new HandleSelectActions(this);
    public interface IHandleSelectActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
